{"version":3,"sources":["service/service.ts","redux/actions.js","components/CountriesSelect/CountriesSelect.tsx","components/Preloader/Preloader.js","components/Chart/Chart.js","components/Dashboard/Dashboard.tsx","components/Country/Country.tsx","components/Login/Login.js","components/ErrorBoundary/ErrorBoundary.tsx","App.tsx","redux/reducer.js","redux/index.js","index.tsx"],"names":["url","getResource","a","fetch","res","ok","Error","status","json","getSummary","configUrl","transformSummaryData","getCountries","transformCountriesData","getCountryStatsFromDay","countryName","transformCountryStatsFromDay","data","Global","global","ID","arr","key","configTitle","replace","push","title","count","Countries","countries","datas","confirmedArr","recoveredArr","deathArr","dateArr","i","length","Confirmed","Recovered","Deaths","configDate","Date","slice","setCountriesData","type","payload","CountriesSelect","dispatch","useDispatch","history","useHistory","countriesData","useSelector","state","useEffect","then","openCountry","localStorage","setItem","JSON","stringify","setCountryData","value","className","listCountries","map","country","Country","label","styles","singleValue","color","options","theme","borderRadius","colors","primary25","onChange","Preloader","ChartLine","stats","countryStats","labels","datasets","backgroundColor","borderColor","borderWidth","height","width","maintainAspectRation","ChartPie","globalData","datasetArr","labelsArr","responsive","maintainAspectRatio","Dashboard","setGlobalData","gridList","item","localStorageData","getItem","countryData","parse","Slug","setCountryStats","Login","foo","bar","dataOnauth","botName","ErrorBoundary","hasError","this","setState","props","children","Component","App","path","exact","initialState","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"yTAAMA,EAAc,8BAEdC,EAAW,uCAAG,WAAOD,GAAP,eAAAE,EAAA,sEACAC,MAAMH,GADN,WACZI,EADY,QAETC,GAFS,sBAGV,IAAIC,MAAJ,0BAA6BN,EAA7B,6BAAgDI,EAAIG,SAH1C,uBAKLH,EAAII,OALC,mFAAH,sDAQJC,EAAU,uCAAG,8BAAAP,EAAA,6DAClBQ,EADkB,UACHV,EADG,oBAENC,EAAYS,GAFN,cAElBN,EAFkB,yBAIjBO,EAAqBP,IAJJ,2CAAH,qDAMVQ,EAAY,uCAAG,4BAAAV,EAAA,6DACRF,EAAM,UADE,SAERC,EADAD,sCADQ,cAEpBI,EAFoB,yBAInBS,EAAuBT,IAJJ,2CAAH,qDAOZU,EAAsB,uCAAG,WAAOC,GAAP,iBAAAb,EAAA,6DAE9BQ,EAF8B,UAEfV,EAFe,wBAEIe,EAFJ,8BAGlBd,EAAYS,GAHM,cAG9BN,EAH8B,yBAK7BY,EAA6BZ,IALA,2CAAH,sDAQ7BO,EAAuB,SAACM,GAAe,IAAD,EAChBA,EAAKC,OAAhBC,GAD2B,EAClCC,GADkC,uBAEpCC,EAAM,GACZ,IAAK,IAAIC,KAAOH,EAAQ,CACtB,IAAMI,EAAcD,EAAIE,QAAQ,YAAa,OAE7CH,EAAII,KAAK,CACPC,MAAOH,EACPI,MAAOR,EAAOG,KAGlB,OAAOD,GAGHR,EAAyB,SAACI,GAAe,IAAD,EACfA,EAAKW,UAAnBC,GAD6B,EACpCT,GADoC,uBAEtCC,EAAM,GAEVM,EAAQ,EAEV,IAAK,IAAIL,KAAOO,EAAW,CACzBF,IADyB,MAEAE,EAAUP,GAApBQ,GAFU,EAEjBV,GAFiB,uBAIrBO,EAPI,KAQNN,EAAII,KAAJ,eACKK,IAIT,OAAOT,GAEHL,EAA+B,SAACC,GAMpC,IALA,IAAMc,EAAe,GACnBC,EAAe,GACfC,EAAW,GACXC,EAAU,GAEHC,EAAI,EAAGA,EAAIlB,EAAKmB,OAAQD,IAAK,CAAC,IAAD,EACWlB,EAAKkB,GAA5CE,EAD4B,EAC5BA,UAAWC,EADiB,EACjBA,UAAWC,EADM,EACNA,OACxBC,EAF8B,EACEC,KACdC,MAAM,EAAG,IAEjCX,EAAaN,KAAKY,GAClBL,EAAaP,KAAKa,GAClBL,EAASR,KAAKc,GACdL,EAAQT,KAAKe,GAEf,MAAO,CACLT,eACAC,eACAC,WACAC,YC9DSS,EAAmB,SAAC1B,GAC/B,MAAO,CACL2B,KApB8B,qBAqB9BC,QAAS5B,I,eCyCE6B,G,MAvDS,WACtB,IAAMC,EAAWC,cAKXC,EAAUC,cACVC,EAAgBC,aAAY,SAACC,GAAD,OAAsBA,EAAMF,iBAE9DG,qBAAU,WACR1C,IAAe2C,MAAK,SAACtC,GACnB8B,EAASJ,EAAiB1B,SAE3B,IAEH,IAAMuC,EAAc,SAACvC,GACnB8B,EDpB0B,SAAC9B,GAE7B,OADAwC,aAAaC,QAAQ,cAAeC,KAAKC,UAAU3C,IAC5C,CACL2B,KAR4B,mBAS5BC,QAAS5B,GCgBA4C,CAAe5C,EAAKA,OAC7BgC,EAAQxB,KAAR,2BAAiCR,EAAK6C,SAUxC,IAAKX,EAAe,OAAO,qBAAKY,UAAU,GAAf,wBAE3B,IAAMC,EAAgBb,EAAcc,KAAI,SAACC,GAAkB,IACjDC,EAAYD,EAAZC,QACR,MAAO,CAAEL,MAAOK,EAASC,MAAOD,EAASlD,KAAMiD,MAGjD,OACE,qBAAKH,UAAU,mBAAf,SACE,cAAC,IAAD,CACEA,UAAU,eACVM,OAlBe,CACnBC,YAAa,WAEX,MAAO,CAAEC,MADK,UAiBZT,MAAO,CAAEA,MAAO,UAAWM,MAAO,WAClCI,QAASR,EACTS,MAAO,SAACA,GAAD,mBAAC,eACHA,GADE,IAELC,aAAc,EACdC,OAAO,2BACFF,EAAME,QADL,IAEJC,UAAW,wBAGfC,SAAU,SAAC5D,GAAD,OAAUuC,EAAYvC,U,eCxDzB,SAAS6D,IACtB,OACE,qBAAKf,UAAU,oBAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WACf,mDCNP,IAAMgB,EAAY,WACvB,IAAMC,EAAQ5B,aAAY,SAACC,GAAD,OAAWA,EAAM4B,gBAE3C,IAAKD,EAAO,OAAO,cAAC,EAAD,IAHU,IAKrBjD,EAAkDiD,EAAlDjD,aAAcC,EAAoCgD,EAApChD,aAAcC,EAAsB+C,EAAtB/C,SAAUC,EAAY8C,EAAZ9C,QAE9C,OACE,qBAAK6B,UAAU,mBAAf,SACE,cAAC,OAAD,CACE9C,KAAM,CACJiE,OAAQhD,EACRiD,SAAU,CACR,CACEf,MAAO,QACPnD,KAAMc,EACNqD,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,GAEf,CACElB,MAAO,UACPnD,KAAMgB,EAENmD,gBAAiB,yBACjBC,YAAa,uBACbC,YAAa,GAGf,CACElB,MAAO,YACPnD,KAAMe,EACNoD,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,KAInBC,OAAQ,GACRC,MAAO,GACPhB,QAAS,CACPiB,sBAAsB,QAOnBC,EAAW,WACtB,IAAMV,EAAQ5B,aAAY,SAACC,GAAD,OAAWA,EAAMsC,cACrCC,EAAaZ,EAAMf,KAAI,SAAChD,GAAD,OAAUA,EAAKU,SACtCkE,EAAYb,EAAMf,KAAI,SAAChD,GAAD,OAAUA,EAAKS,SAE3C,OACE,sBAAKqC,UAAU,kBAAf,UACE,8CACA,cAAC,MAAD,CACE9C,KAAM,CACJiE,OAAQW,EAERV,SAAU,CACR,CACElE,KAAM2E,EACNR,gBAAiB,CACf,0BACA,0BACA,2BACA,0BACA,0BACA,2BAEFC,YAAa,CACX,wBACA,wBACA,yBACA,wBACA,wBACA,yBAEFC,YAAa,IAGjBd,QAAS,CACPsB,YAAY,EACZC,qBAAqB,UC/BlBC,G,OAhDG,WAChB,IAAMjD,EAAWC,cAMX2C,EAAavC,aAAY,SAACC,GAAD,OAAsBA,EAAMsC,cACrDxC,EAAgBC,aAAY,SAACC,GAAD,OAAsBA,EAAMF,iBAW9D,GATAG,qBAAU,WACR7C,IAAa8C,MAAK,SAACtC,GACjB8B,EJKuB,SAAC9B,GAC5B,MAAO,CACL2B,KAzB2B,kBA0B3BC,QAAS5B,GIREgF,CAAchF,OAEzBL,IAAe2C,MAAK,SAACtC,GACnB8B,EAASJ,EAAiB1B,SAE3B,KAEE0E,IAAexC,EAAe,OAAO,cAAC,EAAD,IAC1C,IAAM+C,EAAWP,EAAW1B,KAAI,SAACkC,GAAe,IACtCzE,EAAiByE,EAAjBzE,MAAOC,EAAUwE,EAAVxE,MACf,OACE,qBAAKoC,UAAU,cAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,mBAAGA,UAAU,QAAb,SAAsBrC,IACtB,mBAAGqC,UAAU,QAAb,SAAsBpC,QAHQD,MAStC,OACE,qBAAKqC,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,OAAd,uBACA,qBAAKA,UAAU,QAAf,SAAwBmC,IACxB,sBAAKnC,UAAU,iBAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,iBAAf,SACE,cAAC,EAAD,gBCRGI,G,OA5BC,WACd,IAAMpB,EAAWC,cAEXoD,EAAwB3C,aAAa4C,QAAQ,eAC7CC,EACJlD,aAAY,SAACC,GAAD,OAAsBA,EAAMiD,gBACxC3C,KAAK4C,MAAMH,GASb,GAPA9C,qBAAU,WACR,IAAMvC,EAAsBuF,EAAYE,KACxC1F,EAAuBC,GAAawC,MAAK,SAACtC,GACxC8B,ELXyB,SAAC9B,GAE9B,OADAwC,aAAaC,QAAQ,eAAgBC,KAAKC,UAAU3C,IAC7C,CACL2B,KAf6B,oBAgB7BC,QAAS5B,GKOEwF,CAAgBxF,SAE1B,CAACqF,KAECA,EAAa,OAAO,cAAC,EAAD,IAfL,IAgBHvF,EAAgBuF,EAAzBnC,QAER,OACE,qBAAKJ,UAAU,UAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,gBAAd,SAA+BhD,IAC/B,cAAC,EAAD,W,mCCbO2F,EAjBD,WACZ,IAAMzD,EAAUC,cAMhB,OADA,EAAKyD,IAAIC,IAAM,EAEb,qBAAK7C,UAAU,QAAf,SACE,cAAC,IAAD,CACE8C,WARyB,WAC7B5D,EAAQxB,KAAR,sBACAgC,aAAaC,QAAQ,mBAAmB,IAOpCoD,QAAQ,uB,gCCPKC,E,4MACnB1D,MAAe,CACb2D,UAAU,G,kEAIVC,KAAKC,SAAS,CAAEF,UAAU,M,+BAG1B,OAAIC,KAAK5D,MAAM2D,SACN,qBAAKjD,UAAU,iBAAf,4BAEFkD,KAAKE,MAAMC,a,GAZqBC,a,iBC4B5BC,EA3BH,WACV,OACE,mCACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,YAAYC,OAAK,EAA7B,SACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJ,cAAC,IAAD,CAAOD,KAAK,qBAAZ,SACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJ,cAAC,IAAD,CAAOA,KAAK,qBAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,4BAAZ,SACE,cAAC,EAAD,c,QC7BNE,EAAe,CACnBnB,YAAa,MCEFoB,EAAQC,aDCM,WAAmC,IAAlCtE,EAAiC,uDAAzBoE,EAAcG,EAAW,uCAC3D,OAAQA,EAAOhF,MACb,IAAK,kBACH,OAAO,2BAAKS,GAAZ,IAAmBsC,WAAYiC,EAAO/E,UAExC,IAAK,mBACH,OAAO,2BAAKQ,GAAZ,IAAmBiD,YAAasB,EAAO/E,UAEzC,IAAK,qBACH,OAAO,2BAAKQ,GAAZ,IAAmBF,cAAeyE,EAAO/E,UAE3C,IAAK,oBACH,OAAO,2BAAKQ,GAAZ,IAAmB4B,aAAc2C,EAAO/E,UAE1C,QACE,OAAOQ,MEbbwE,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,U","file":"static/js/main.ed5ffb18.chunk.js","sourcesContent":["const url: string = \"https://api.covid19api.com/\";\r\n\r\nconst getResource = async (url: string) => {\r\n  const res = await fetch(url);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch ${url} +, reсeived ${res.status}`);\r\n  }\r\n  return await res.json();\r\n};\r\n\r\nexport const getSummary = async () => {\r\n  const configUrl = `${url}summary`;\r\n  const res = await getResource(configUrl);\r\n\r\n  return transformSummaryData(res);\r\n};\r\nexport const getCountries = async () => {\r\n  const configUrl = url + \"summary\";\r\n  const res = await getResource(configUrl);\r\n\r\n  return transformCountriesData(res);\r\n};\r\n\r\nexport const getCountryStatsFromDay = async (countryName: string) => {\r\n  // const fromDay = \"2020-01-01T13:13:30Z\";\r\n  const configUrl = `${url}live/country/${countryName}/status/confirmed`;\r\n  const res = await getResource(configUrl);\r\n\r\n  return transformCountryStatsFromDay(res);\r\n};\r\n\r\nconst transformSummaryData = (data: any) => {\r\n  const { ID, ...global } = data.Global;\r\n  const arr = [];\r\n  for (let key in global) {\r\n    const configTitle = key.replace(/([A-Z]+)/g, \" $1\");\r\n\r\n    arr.push({\r\n      title: configTitle,\r\n      count: global[key],\r\n    });\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst transformCountriesData = (data: any) => {\r\n  const { ID, ...countries } = data.Countries;\r\n  const arr = [];\r\n  let max = 150,\r\n    count = 0;\r\n\r\n  for (let key in countries) {\r\n    count++;\r\n    const { ID, ...datas } = countries[key];\r\n\r\n    if (count < max) {\r\n      arr.push({\r\n        ...datas,\r\n      });\r\n    }\r\n  }\r\n  return arr;\r\n};\r\nconst transformCountryStatsFromDay = (data: any) => {\r\n  const confirmedArr = [],\r\n    recoveredArr = [],\r\n    deathArr = [],\r\n    dateArr = [];\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    const { Confirmed, Recovered, Deaths, Date } = data[i];\r\n    const configDate = Date.slice(0, 10);\r\n\r\n    confirmedArr.push(Confirmed);\r\n    recoveredArr.push(Recovered);\r\n    deathArr.push(Deaths);\r\n    dateArr.push(configDate);\r\n  }\r\n  return {\r\n    confirmedArr,\r\n    recoveredArr,\r\n    deathArr,\r\n    dateArr,\r\n  };\r\n};\r\n","export const SET_COUNTRY_DATA = \"SET_COUNTRY_DATA\";\r\nexport const SET_COUNTRY_STATS = \"SET_COUNTRY_STATS\";\r\nexport const SET_COUNTRIES_DATA = \"SET_COUNTRIES_DATA\";\r\nexport const SET_GLOBAL_DATA = \"SET_GLOBAL_DATA\";\r\n\r\nexport const setCountryData = (data) => {\r\n  localStorage.setItem(\"countryData\", JSON.stringify(data));\r\n  return {\r\n    type: SET_COUNTRY_DATA,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const setCountryStats = (data) => {\r\n  localStorage.setItem(\"countryStats\", JSON.stringify(data));\r\n  return {\r\n    type: SET_COUNTRY_STATS,\r\n    payload: data,\r\n  };\r\n};\r\nexport const setCountriesData = (data) => {\r\n  return {\r\n    type: SET_COUNTRIES_DATA,\r\n    payload: data,\r\n  };\r\n};\r\nexport const setGlobalData = (data) => {\r\n  return {\r\n    type: SET_GLOBAL_DATA,\r\n    payload: data,\r\n  };\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCountries } from \"../../service/service\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setCountryData, setCountriesData } from \"../../redux/actions\";\r\nimport Select from \"react-select\";\r\n\r\nimport \"./CountriesSelect.scss\";\r\n\r\nconst CountriesSelect = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  interface RootState {\r\n    countriesData: any;\r\n  }\r\n  const history = useHistory();\r\n  const countriesData = useSelector((state: RootState) => state.countriesData);\r\n\r\n  useEffect(() => {\r\n    getCountries().then((data: any) => {\r\n      dispatch(setCountriesData(data));\r\n    });\r\n  }, []);\r\n\r\n  const openCountry = (data: any) => {\r\n    dispatch(setCountryData(data.data));\r\n    history.push(`/covid19/country/${data.value}`);\r\n  };\r\n\r\n  const customStyles = {\r\n    singleValue: () => {\r\n      const color = \"#fff\";\r\n      return { color };\r\n    },\r\n  };\r\n\r\n  if (!countriesData) return <div className=\"\">Loading...</div>;\r\n\r\n  const listCountries = countriesData.map((country: any) => {\r\n    const { Country } = country;\r\n    return { value: Country, label: Country, data: country };\r\n  });\r\n\r\n  return (\r\n    <div className=\"countries-select\">\r\n      <Select\r\n        className=\"react-select\"\r\n        styles={customStyles}\r\n        value={{ value: \"Country\", label: \"Country\" }}\r\n        options={listCountries}\r\n        theme={(theme) => ({\r\n          ...theme,\r\n          borderRadius: 0,\r\n          colors: {\r\n            ...theme.colors,\r\n            primary25: \"rgb(29, 32, 41);\",\r\n          },\r\n        })}\r\n        onChange={(data) => openCountry(data)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountriesSelect;\r\n","import \"./Preloader.scss\";\r\n\r\nexport default function Preloader() {\r\n  return (\r\n    <div className=\"preloader-wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"preloader\">\r\n          <div className=\"bar-wrapper\">\r\n            <div className=\"bar\">\r\n              <div className=\"circle\"></div>\r\n              <p>Loading</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Line, Pie } from \"react-chartjs-2\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\n\r\nexport const ChartLine = () => {\r\n  const stats = useSelector((state) => state.countryStats);\r\n\r\n  if (!stats) return <Preloader />;\r\n\r\n  const { confirmedArr, recoveredArr, deathArr, dateArr } = stats;\r\n\r\n  return (\r\n    <div className=\"clart-line chart\">\r\n      <Line\r\n        data={{\r\n          labels: dateArr,\r\n          datasets: [\r\n            {\r\n              label: \"Cases\",\r\n              data: confirmedArr,\r\n              backgroundColor: \"rgba(182, 255, 99, 0.2)\",\r\n              borderColor: \"rgba(182, 255, 99, 1)\",\r\n              borderWidth: 1,\r\n            },\r\n            {\r\n              label: \"Deathes\",\r\n              data: deathArr,\r\n\r\n              backgroundColor: \"rgba(255, 99, 99, 0.2)\",\r\n              borderColor: \"rgba(255, 99, 99, 1)\",\r\n              borderWidth: 1,\r\n            },\r\n\r\n            {\r\n              label: \"Recovered\",\r\n              data: recoveredArr,\r\n              backgroundColor: \"rgba(99, 255, 213, 0.2)\",\r\n              borderColor: \"rgba(99, 255, 213, 1)\",\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        }}\r\n        height={10}\r\n        width={20}\r\n        options={{\r\n          maintainAspectRation: false,\r\n        }}\r\n      ></Line>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ChartPie = () => {\r\n  const stats = useSelector((state) => state.globalData);\r\n  const datasetArr = stats.map((data) => data.count);\r\n  const labelsArr = stats.map((data) => data.title);\r\n\r\n  return (\r\n    <div className=\"chart-pie chart\">\r\n      <h2>Global Stats</h2>\r\n      <Pie\r\n        data={{\r\n          labels: labelsArr,\r\n\r\n          datasets: [\r\n            {\r\n              data: datasetArr,\r\n              backgroundColor: [\r\n                \"rgba(54, 162, 235, 0.4)\",\r\n                \"rgba(255, 159, 64, 0.4)\",\r\n                \"rgba(153, 102, 255, 0.4)\",\r\n                \"rgba(75, 192, 192, 0.4)\",\r\n                \"rgba(255, 206, 86, 0.4)\",\r\n                \"rgba(255, 99, 132, 0.4)\",\r\n              ],\r\n              borderColor: [\r\n                \"rgba(54, 162, 235, 1)\",\r\n                \"rgba(255, 159, 64, 1)\",\r\n                \"rgba(153, 102, 255, 1)\",\r\n                \"rgba(75, 192, 192, 1)\",\r\n                \"rgba(255, 206, 86, 1)\",\r\n                \"rgba(255, 99, 132, 1)\",\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n          },\r\n        }}\r\n      ></Pie>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getSummary, getCountries } from \"../../service/service\";\r\nimport { setGlobalData, setCountriesData } from \"../../redux/actions\";\r\nimport CountriesSelect from \"../CountriesSelect/CountriesSelect\";\r\nimport { ChartPie } from \"../Chart/Chart\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport \"./Dashboard.scss\";\r\n\r\nconst Dashboard = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  interface RootState {\r\n    globalData: any;\r\n    countriesData: any;\r\n  }\r\n  const globalData = useSelector((state: RootState) => state.globalData);\r\n  const countriesData = useSelector((state: RootState) => state.countriesData);\r\n\r\n  useEffect(() => {\r\n    getSummary().then((data: any) => {\r\n      dispatch(setGlobalData(data));\r\n    });\r\n    getCountries().then((data: any) => {\r\n      dispatch(setCountriesData(data));\r\n    });\r\n  }, []);\r\n\r\n  if (!globalData || !countriesData) return <Preloader />;\r\n  const gridList = globalData.map((item: any) => {\r\n    const { title, count } = item;\r\n    return (\r\n      <div className=\"grid-square\" key={title}>\r\n        <div className=\"grid-square-content\">\r\n          <p className=\"title\">{title}</p>\r\n          <p className=\"count\">{count}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"container\">\r\n        <h1 className=\"logo\">Dashboard</h1>\r\n        <div className=\"table\">{gridList}</div>\r\n        <div className=\"dashboard-flex\">\r\n          <CountriesSelect />\r\n          <div className=\"word-grid grid\">\r\n            <ChartPie />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCountryStatsFromDay } from \"../../service/service\";\r\nimport { setCountryStats } from \"../../redux/actions\";\r\nimport { ChartLine } from \"../Chart/Chart\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\n\r\nimport \"./Country.scss\";\r\n\r\ninterface RootState {\r\n  countryData: any;\r\n  countryStats: any;\r\n}\r\nconst Country = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const localStorageData: any = localStorage.getItem(\"countryData\");\r\n  const countryData =\r\n    useSelector((state: RootState) => state.countryData) ||\r\n    JSON.parse(localStorageData);\r\n\r\n  useEffect(() => {\r\n    const countryName: string = countryData.Slug;\r\n    getCountryStatsFromDay(countryName).then((data) => {\r\n      dispatch(setCountryStats(data));\r\n    });\r\n  }, [countryData]);\r\n\r\n  if (!countryData) return <Preloader />;\r\n  const { Country: countryName } = countryData;\r\n\r\n  return (\r\n    <div className=\"country\">\r\n      <div className=\"container\">\r\n        <h1 className=\"country-title\">{countryName}</h1>\r\n        <ChartLine />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","import { useHistory } from \"react-router-dom\";\r\n\r\nimport \"./Login.scss\";\r\nimport TelegramLoginButton from \"react-telegram-login\";\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const handleTelegramResponse = () => {\r\n    history.push(`/covid19/dashboard`);\r\n    localStorage.setItem(\"userLoginStatus\", true);\r\n  };\r\n  this.foo.bar = 0;\r\n  return (\r\n    <div className=\"login\">\r\n      <TelegramLoginButton\r\n        dataOnauth={handleTelegramResponse}\r\n        botName=\"covid19LoginBot\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n}\r\nexport default class ErrorBoundary extends Component<Props, State> {\r\n  state: State = {\r\n    hasError: false,\r\n  };\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    if (this.state.hasError)\r\n      return <div className=\"error-boundary\">error boundary</div>;\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React from \"react\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\nimport Countries from \"./components/CountriesSelect/CountriesSelect\";\nimport Country from \"./components/Country/Country\";\nimport Login from \"./components/Login/Login\";\nimport ErrorBoundary from \"./components/ErrorBoundary/ErrorBoundary\";\n\nimport \"./App.scss\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/covid19/\" exact>\n            <ErrorBoundary>\n              <Login />\n            </ErrorBoundary>\n          </Route>\n          <Route path=\"/covid19/dashboard\">\n            <ErrorBoundary>\n              <Dashboard />\n            </ErrorBoundary>\n          </Route>\n          <Route path=\"/covid19/countries\">\n            <Countries />\n          </Route>\n          <Route path=\"/covid19/country/:Country\">\n            <Country />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n","const initialState = {\r\n  countryData: null,\r\n};\r\n\r\nexport const mainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_GLOBAL_DATA\":\r\n      return { ...state, globalData: action.payload };\r\n\r\n    case \"SET_COUNTRY_DATA\":\r\n      return { ...state, countryData: action.payload };\r\n      \r\n    case \"SET_COUNTRIES_DATA\":\r\n      return { ...state, countriesData: action.payload };\r\n\r\n    case \"SET_COUNTRY_STATS\":\r\n      return { ...state, countryStats: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { mainReducer } from \"./reducer\";\r\n\r\nexport const store = createStore(mainReducer);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"../src/redux/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}