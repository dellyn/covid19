{"version":3,"sources":["service/service.ts","redux/actions.js","components/Preloader/Preloader.js","components/Chart/Chart.js","components/CountriesSelect/CountriesSelect.tsx","components/Error/ErrorIndicator.js","components/Error/ErrorBoundary.tsx","components/Dashboard/Dashboard.tsx","components/Country/Country.tsx","components/Login/Login.js","App.tsx","redux/reducer.js","redux/index.js","index.tsx"],"names":["url","process","summaryUrl","getResource","a","fetch","res","ok","Error","status","json","getSummary","transformSummaryData","getCountries","transformCountriesData","getCountryStatsFromDay","countryName","configUrl","transformCountryStatsFromDay","data","Global","global","ID","arr","key","configTitle","replace","trimStart","push","title","count","Countries","countries","datas","confirmedArr","recoveredArr","deathArr","dateArr","i","length","Confirmed","Recovered","Deaths","configDate","Date","slice","SET_COUNTRY_DATA","SET_COUNTRY_STATS","SET_COUNTRIES_DATA","SET_GLOBAL_DATA","setCountriesData","type","payload","setGlobalData","Preloader","className","ChartLine","stats","useSelector","state","countryStats","labels","datasets","label","backgroundColor","borderColor","borderWidth","height","width","options","maintainAspectRation","ChartPie","globalData","datasetArr","map","labelsArr","responsive","maintainAspectRatio","CountriesSelect","dispatch","useDispatch","history","useHistory","countriesData","useEffect","then","openCountry","localStorage","setItem","JSON","stringify","setCountryData","value","listCountries","country","Country","styles","singleValue","color","theme","borderRadius","colors","primary25","onChange","ErrorIndicator","ErrorBoundary","hasError","this","setState","props","children","Component","Dashboard","useState","error","setError","loading","setLoading","catch","syncExecution","gridList","localStorageData","getItem","countryData","parse","Slug","setCountryStats","Login","dataOnauth","botName","App","path","exact","initialState","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57e57400.chunk.js","sourcesContent":["const url: string = process.env.REACT_APP_API_BASE!;\r\nconst summaryUrl = `${url}summary`;\r\n\r\nconst getResource = async (url: string) => {\r\n  const res = await fetch(url);\r\n  if (!res.ok) {\r\n    throw new Error(`Could not fetch ${url}, reсeived ${res.status}`);\r\n  }\r\n  return await res.json();\r\n};\r\n\r\nexport const getSummary = async () => {\r\n  const res = await getResource(summaryUrl);\r\n  return transformSummaryData(res);\r\n};\r\nexport const getCountries = async () => {\r\n  const res = await getResource(summaryUrl);\r\n  return transformCountriesData(res);\r\n};\r\n\r\nexport const getCountryStatsFromDay = async (countryName: string) => {\r\n  const configUrl = `${url}live/country/${countryName}/status/confirmed`;\r\n  const res = await getResource(configUrl);\r\n\r\n  return transformCountryStatsFromDay(res);\r\n};\r\n\r\n// type SummaryDataType = {\r\n//   ID: string;\r\n//   Countries: any[];\r\n//   Global: GlobalInterface;\r\n// };\r\n// interface GlobalInterface {\r\n//   ID: string;\r\n//   NewConfirmed: string;\r\n// }\r\nconst transformSummaryData = (data: any) => {\r\n  const { ID, ...global } = data.Global;\r\n  const arr = [];\r\n\r\n  for (let key in global) {\r\n    const configTitle = key.replace(/([A-Z]+)/g, \" $1\").trimStart();\r\n\r\n    arr.push({\r\n      title: configTitle,\r\n      count: global[key],\r\n    });\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst transformCountriesData = (data: any) => {\r\n  const { ID, ...countries } = data.Countries;\r\n  const arr = [];\r\n  let max = 150,\r\n    count = 0;\r\n\r\n  for (let key in countries) {\r\n    count++;\r\n    const { ID, ...datas } = countries[key];\r\n\r\n    if (count < max) {\r\n      arr.push({\r\n        ...datas,\r\n      });\r\n    }\r\n  }\r\n  return arr;\r\n};\r\nconst transformCountryStatsFromDay = (data: any) => {\r\n  const confirmedArr = [],\r\n    recoveredArr = [],\r\n    deathArr = [],\r\n    dateArr = [];\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    const { Confirmed, Recovered, Deaths, Date } = data[i];\r\n    const configDate = Date.slice(0, 10);\r\n\r\n    confirmedArr.push(Confirmed);\r\n    recoveredArr.push(Recovered);\r\n    deathArr.push(Deaths);\r\n    dateArr.push(configDate);\r\n  }\r\n  return {\r\n    confirmedArr,\r\n    recoveredArr,\r\n    deathArr,\r\n    dateArr,\r\n  };\r\n};\r\n","export const SET_COUNTRY_DATA = \"SET_COUNTRY_DATA\";\r\nexport const SET_COUNTRY_STATS = \"SET_COUNTRY_STATS\";\r\nexport const SET_COUNTRIES_DATA = \"SET_COUNTRIES_DATA\";\r\nexport const SET_GLOBAL_DATA = \"SET_GLOBAL_DATA\";\r\n\r\nexport const setCountryData = (data) => {\r\n  localStorage.setItem(\"countryData\", JSON.stringify(data));\r\n  return {\r\n    type: SET_COUNTRY_DATA,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const setCountryStats = (data) => {\r\n  localStorage.setItem(\"countryStats\", JSON.stringify(data));\r\n  return {\r\n    type: SET_COUNTRY_STATS,\r\n    payload: data,\r\n  };\r\n};\r\nexport const setCountriesData = (data) => {\r\n  return {\r\n    type: SET_COUNTRIES_DATA,\r\n    payload: data,\r\n  };\r\n};\r\nexport const setGlobalData = (data) => {\r\n  return {\r\n    type: SET_GLOBAL_DATA,\r\n    payload: data,\r\n  };\r\n};\r\n","import \"./Preloader.scss\";\r\n\r\nexport default function Preloader() {\r\n  return (\r\n    <div className=\"preloader-wrapper\">\r\n      <div className=\"container\">\r\n        <div className=\"preloader\">\r\n          <div className=\"bar-wrapper\">\r\n            <div className=\"bar\">\r\n              <div className=\"circle\"></div>\r\n              <p>Loading</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Line, Pie } from \"react-chartjs-2\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\n\r\nexport const ChartLine = () => {\r\n  const stats = useSelector((state) => state.countryStats);\r\n\r\n  if (!stats) return <Preloader />;\r\n\r\n  const { confirmedArr, recoveredArr, deathArr, dateArr } = stats;\r\n\r\n  return (\r\n    <div className=\"clart-line chart\">\r\n      <Line\r\n        data={{\r\n          labels: dateArr,\r\n          datasets: [\r\n            {\r\n              label: \"Cases\",\r\n              data: confirmedArr,\r\n              backgroundColor: \"rgba(182, 255, 99, 0.2)\",\r\n              borderColor: \"rgba(182, 255, 99, 1)\",\r\n              borderWidth: 1,\r\n            },\r\n            {\r\n              label: \"Deathes\",\r\n              data: deathArr,\r\n\r\n              backgroundColor: \"rgba(255, 99, 99, 0.2)\",\r\n              borderColor: \"rgba(255, 99, 99, 1)\",\r\n              borderWidth: 1,\r\n            },\r\n\r\n            {\r\n              label: \"Recovered\",\r\n              data: recoveredArr,\r\n              backgroundColor: \"rgba(99, 255, 213, 0.2)\",\r\n              borderColor: \"rgba(99, 255, 213, 1)\",\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        }}\r\n        height={10}\r\n        width={20}\r\n        options={{\r\n          maintainAspectRation: false,\r\n        }}\r\n      ></Line>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ChartPie = () => {\r\n  const stats = useSelector((state) => state.globalData);\r\n  const datasetArr = stats.map((data) => data.count);\r\n  const labelsArr = stats.map((data) => data.title);\r\n\r\n  return (\r\n    <div className=\"chart-pie chart\">\r\n      <h2>Global Stats</h2>\r\n      <Pie\r\n        data={{\r\n          labels: labelsArr,\r\n\r\n          datasets: [\r\n            {\r\n              data: datasetArr,\r\n              backgroundColor: [\r\n                \"rgba(54, 162, 235, 0.4)\",\r\n                \"rgba(255, 159, 64, 0.4)\",\r\n                \"rgba(153, 102, 255, 0.4)\",\r\n                \"rgba(75, 192, 192, 0.4)\",\r\n                \"rgba(255, 206, 86, 0.4)\",\r\n                \"rgba(255, 99, 132, 0.4)\",\r\n              ],\r\n              borderColor: [\r\n                \"rgba(54, 162, 235, 1)\",\r\n                \"rgba(255, 159, 64, 1)\",\r\n                \"rgba(153, 102, 255, 1)\",\r\n                \"rgba(75, 192, 192, 1)\",\r\n                \"rgba(255, 206, 86, 1)\",\r\n                \"rgba(255, 99, 132, 1)\",\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n          options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n          },\r\n        }}\r\n      ></Pie>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCountries } from \"../../service/service\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setCountryData, setCountriesData } from \"../../redux/actions\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nimport \"./CountriesSelect.scss\";\r\n\r\n// type CountryDataType = {\r\n//   label: string;\r\n//   value: string;\r\n//   data: CountriesDataType;\r\n// };\r\ntype CountriesDataType = {\r\n  Country: string;\r\n};\r\ninterface RootState {\r\n  countriesData: any;\r\n}\r\nconst CountriesSelect = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useHistory();\r\n  const countriesData = useSelector((state: RootState) => state.countriesData);\r\n\r\n  useEffect(() => {\r\n    getCountries().then((data: CountriesDataType[]) => {\r\n      dispatch(setCountriesData(data));\r\n    });\r\n  }, []);\r\n\r\n  const openCountry = (data: any) => {\r\n    dispatch(setCountryData(data.data));\r\n    history.push(`/covid19/country/${data.value}`);\r\n  };\r\n\r\n  const customStyles = {\r\n    singleValue: () => {\r\n      const color = \"#fff\";\r\n      return { color };\r\n    },\r\n  };\r\n\r\n  if (!countriesData) return <Preloader />;\r\n\r\n  const listCountries = countriesData.map((country: CountriesDataType) => {\r\n    const { Country } = country;\r\n\r\n    return { value: Country, label: Country, data: country };\r\n  });\r\n\r\n  return (\r\n    <div className=\"countries-select\">\r\n      <Select\r\n        className=\"react-select\"\r\n        styles={customStyles}\r\n        value={{ value: \"Country\", label: \"Country\" }}\r\n        options={listCountries}\r\n        theme={(theme) => ({\r\n          ...theme,\r\n          borderRadius: 0,\r\n          colors: {\r\n            ...theme.colors,\r\n            primary25: \"rgb(29, 32, 41);\",\r\n          },\r\n        })}\r\n        onChange={(data) => openCountry(data)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountriesSelect;\r\n","import \"./Error.scss\";\r\nexport default function ErrorIndicator() {\r\n  return (\r\n    <div className=\"error-indicator\">\r\n      <p>Oops something get wrong</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ErrorIndicator from \"./ErrorIndicator\";\r\n\r\nimport \"./Error.scss\";\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\ninterface State {\r\n  hasError: boolean;\r\n}\r\n\r\nexport default class ErrorBoundary extends Component<Props, State> {\r\n  state: State = {\r\n    hasError: false,\r\n  };\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) return <ErrorIndicator />;\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getSummary, getCountries } from \"../../service/service\";\r\nimport { setGlobalData, setCountriesData } from \"../../redux/actions\";\r\nimport { ChartPie } from \"../Chart/Chart\";\r\nimport CountriesSelect from \"../CountriesSelect/CountriesSelect\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport ErrorIndicator from \"../Error/ErrorIndicator\";\r\nimport ErrorBoundary from \"../Error/ErrorBoundary\";\r\n\r\nimport \"./Dashboard.scss\";\r\n\r\nconst Dashboard = () => {\r\n  const dispatch = useDispatch();\r\n  const [error, setError] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  type GlobalDataType = {\r\n    count: number;\r\n    title: string;\r\n  };\r\n  interface RootState {\r\n    globalData: GlobalDataType[];\r\n  }\r\n  const globalData = useSelector((state: RootState) => state.globalData);\r\n\r\n  useEffect(() => {\r\n    const syncExecution = async () => {\r\n      await getSummary()\r\n        .then((data: any) => {\r\n          dispatch(setGlobalData(data));\r\n        })\r\n        .catch(() => {\r\n          setError(true);\r\n        });\r\n\r\n      await getCountries()\r\n        .then((data: any) => {\r\n          dispatch(setCountriesData(data));\r\n        })\r\n        .catch(() => {\r\n          setError(true);\r\n        });\r\n\r\n      setLoading(false);\r\n    };\r\n    syncExecution();\r\n  }, []);\r\n\r\n  if (loading && !error) return <Preloader />;\r\n  else if (error) return <ErrorIndicator />;\r\n\r\n  const gridList = globalData.map((data: GlobalDataType) => {\r\n    const { title, count } = data;\r\n    return (\r\n      <div className=\"grid-square\" key={title}>\r\n        <div className=\"grid-square-content\">\r\n          <p className=\"title\">{title}</p>\r\n          <p className=\"count\">{count}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"container\">\r\n        <h1 className=\"logo\">Dashboard</h1>\r\n        <div className=\"table\">{gridList}</div>\r\n        <div className=\"dashboard-flex\">\r\n          <ErrorBoundary>\r\n            <CountriesSelect />\r\n          </ErrorBoundary>\r\n          <div className=\"word-grid grid\">\r\n            <ErrorBoundary>\r\n              <ChartPie />\r\n            </ErrorBoundary>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCountryStatsFromDay } from \"../../service/service\";\r\nimport { setCountryStats } from \"../../redux/actions\";\r\nimport { ChartLine } from \"../Chart/Chart\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\n\r\nimport \"./Country.scss\";\r\n\r\ninterface RootState {\r\n  countryData: any;\r\n  countryStats: any;\r\n}\r\nconst Country = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const localStorageData: string = localStorage.getItem(\"countryData\")!;\r\n  const countryData =\r\n    useSelector((state: RootState) => state.countryData) ||\r\n    JSON.parse(localStorageData);\r\n\r\n  useEffect(() => {\r\n    const countryName: string = countryData.Slug;\r\n    \r\n    getCountryStatsFromDay(countryName).then((data) => {\r\n      dispatch(setCountryStats(data));\r\n    });\r\n  }, [countryData]);\r\n\r\n  if (!countryData) return <Preloader />;\r\n  const { Country: countryName } = countryData;\r\n\r\n  return (\r\n    <div className=\"country\">\r\n      <div className=\"container\">\r\n        <h1 className=\"country-title\">{countryName}</h1>\r\n        <ChartLine />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","import { useHistory } from \"react-router-dom\";\r\nimport TelegramLoginButton from \"react-telegram-login\";\r\n\r\nimport \"./Login.scss\";\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n\r\n  const handleTelegramResponse = () => {\r\n    history.push(`/covid19/dashboard`);\r\n    localStorage.setItem(\"userLoginStatus\", true);\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login-center\">\r\n        <h1>COVID19 APP</h1>\r\n        <TelegramLoginButton\r\n          dataOnauth={handleTelegramResponse}\r\n          botName=\"covid19LoginBot\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\nimport Countries from \"./components/CountriesSelect/CountriesSelect\";\nimport Country from \"./components/Country/Country\";\nimport Login from \"./components/Login/Login\";\nimport ErrorBoundary from \"./components/Error/ErrorBoundary\";\n\nimport \"./App.scss\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/covid19/\" exact>\n            <ErrorBoundary>\n              <Login />\n            </ErrorBoundary>\n          </Route>\n          <Route path=\"/covid19/dashboard\">\n            <ErrorBoundary>\n              <Dashboard />\n            </ErrorBoundary>\n          </Route>\n          <Route path=\"/covid19/countries\">\n            <ErrorBoundary>\n              <Countries />\n            </ErrorBoundary>\n          </Route>\n          <Route path=\"/covid19/country/:Country\">\n            <ErrorBoundary>\n              <Country />\n            </ErrorBoundary>\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n","import {\r\n  SET_COUNTRY_DATA,\r\n  SET_COUNTRY_STATS,\r\n  SET_COUNTRIES_DATA,\r\n  SET_GLOBAL_DATA,\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n  countryData: null,\r\n};\r\n\r\nexport const mainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_GLOBAL_DATA:\r\n      return { ...state, globalData: action.payload };\r\n\r\n    case SET_COUNTRY_DATA:\r\n      return { ...state, countryData: action.payload };\r\n\r\n    case SET_COUNTRIES_DATA:\r\n      return { ...state, countriesData: action.payload };\r\n\r\n    case SET_COUNTRY_STATS:\r\n      return { ...state, countryStats: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { mainReducer } from \"./reducer\";\r\n\r\nexport const store = createStore(mainReducer);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"../src/redux/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}